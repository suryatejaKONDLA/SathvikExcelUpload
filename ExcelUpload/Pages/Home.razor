@page "/"
@using ExcelUpload.Models
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<div class="col-12">
    <div class="mb-5 row">
        <div class="col-12">
            <MudButton Class="mb-2 me-2"
                       Color="Color.Info"
                       OnClick="@(() => LoadExcelDataAsync("PAS_Standardization_Template"))"
                       Variant="Variant.Outlined">
                PAS Standardization Template
            </MudButton>
            <MudButton Class="mb-2 me-2"
                       Color="Color.Info"
                       OnClick="@(() => LoadExcelDataAsync("SUB_IV_PAS_Standardization_Template_STATION_1_2"))"
                       Variant="Variant.Outlined">
                SUB IV PAS Standardization Template (STATION 1&amp;2)
            </MudButton>
            <MudButton Class="mb-2"
                       Color="Color.Info"
                       OnClick="@(() => LoadExcelDataAsync("SUB_IV_PAS_Standardization_Template_STATION_3_4"))"
                       Variant="Variant.Outlined">
                SUB IV PAS Standardization Template (STATION 3&amp;4)
            </MudButton>
        </div>
    </div>

    <!-- Square box under buttons -->
    @{
        if (FilteredSheets.Any())
        {
            <div class="row">
                <div class="col-12 d-flex justify-content-center">
                    <div style="border: 1px solid #ccc; padding: 16px; width: 100%; height: 100%; border-radius: 6px;">
                        <div class="col-12">
                            <div class="row">
                                <div class="d-flex flex-wrap gap-2">
                                    @{
                                        foreach (var sheet in FilteredSheets)
                                        {
                                            <MudButton Color="Color.Primary"
                                                       OnClick="@(() => SelectSheetAsync(sheet))"
                                                       Variant="Variant.Outlined">
                                                @(sheet)
                                            </MudButton>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="row">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Inject] IJSRuntime JsRuntime { get; set; }
    private string SelectedFileName = string.Empty;
    private string SelectedSheetName = string.Empty;

    private List<string> FilteredSheets = [];

    private static readonly List<string> DefaultsSheets =
    [
        "Analogs",
        "Status",
        "Controls"
    ];

    private async Task LoadExcelDataAsync(string fileName)
    {
        SelectedFileName = fileName;
        FilteredSheets = [];

        var sheetNames = await JsRuntime.InvokeAsync<List<string>>("readExcelSheets", $"templates/{fileName}.xlsx");
        FilteredSheets = sheetNames.Where(name => DefaultsSheets.Contains(name)).ToList();
    }

    private async Task SelectSheetAsync(string sheetName)
    {
        SelectedSheetName = sheetName;

        var forecasts = await Http.GetFromJsonAsync<List<PasStandardizationTemplateControlsSheetModel>>($"templatesJson/{SelectedFileName}_{SelectedSheetName}.json");


        var json = await JsRuntime.InvokeAsync<string>("readExcelSheetData", $"templates/{SelectedFileName}.xlsx", SelectedSheetName);
        var xx = json;

        await JsRuntime.InvokeVoidAsync(
            "downloadJsonFile",
            $"{SelectedFileName}_{SelectedSheetName}.json",
            json
        );
        // var objects = System.Text.Json.JsonSerializer.Deserialize<List<PasStandardizationTemplateAnalogSheetModel>>(json);
        // SheetJson = json;
    }

}