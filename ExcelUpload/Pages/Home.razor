@page "/"
@using System.Text.Json
@using ExcelUpload.Models
@inject IJSRuntime JsRuntime

<PageTitle>Home</PageTitle>

<div class="align-items-center d-flex flex-wrap gap-2 justify-content-between mb-5">
    <div class="d-flex flex-wrap gap-2">
        <MudSelect T="string"
                   Label="Select Template"
                   Variant="Variant.Outlined"
                   Dense="true"
                   ValueChanged="LoadSheets">
            <MudSelectItem T="string" Value="@("PAS_Standardization_Template")">PAS Standardization Template</MudSelectItem>
            <MudSelectItem T="string" Value="@("SUB_IV_PAS_Standardization_Template_STATION_1_2")">SUB IV PAS Standardization Template (STATION 1&amp;2)</MudSelectItem>
            <MudSelectItem T="string" Value="@("SUB_IV_PAS_Standardization_Template_STATION_3_4")">SUB IV PAS Standardization Template (STATION 3&amp;4)</MudSelectItem>
        </MudSelect>
    </div>

    <MudButton Color="Color.Primary"
               OnClick="ToggleEdit"
               Variant="Variant.Filled">
        @(IsEditEnabled ? "Disable Edit Mode" : "Enable Edit Mode")
    </MudButton>
</div>



@{
    if (FilteredSheets.Any())
    {
        <div class="d-flex flex-wrap gap-2 mb-4">
            @foreach (var sheet in FilteredSheets)
            {
                <MudButton Color="Color.Primary"
                           OnClick="@(() => SelectSheetAsync(sheet))"
                           Variant="Variant.Outlined">
                    @(sheet)
                </MudButton>
            }
        </div>

        if (SelectedSheetName == "Analogs")
        {
            <MudText Typo="Typo.h6">Analog Sheet</MudText>

            if (AnalogData.Any())
            {
                <MudDataGrid Bordered="true"
                             CanceledEditingItem="@CanceledEditingItem"
                             CommittedItemChanges="@CommittedItemChanges"
                             Dense="false"
                             EditMode="DataGridEditMode.Cell"
                             FixedHeader="true"
                             Height="500px"
                             Items="@AnalogData"
                             ReadOnly="@(!IsEditEnabled)"
                             StartedEditingItem="@StartedEditingItem"
                             T="PasStandardizationTemplateAnalogSheetModel"
                             Virtualize="true">
                    <Columns>
                        <PropertyColumn Property="x => x.Rtu" />
                        <PropertyColumn Property="x => x.Tms" />
                        <PropertyColumn Property="x => x.Description" />
                        <PropertyColumn Editable="false" Property="x => x.OsiName" />
                        <PropertyColumn Editable="false" Property="x => x.ScadaKey" />
                        <PropertyColumn Property="x => x.Ph" />
                        <PropertyColumn Property="x => x.Unit" />
                        <PropertyColumn Property="x => x.FullScaleValue" />
                        <PropertyColumn Property="x => x.FullScaleCount" />
                        <PropertyColumn Property="x => x.TerminationPointTypeUtilizeForHardwareAndSoftware" />
                        <PropertyColumn Property="x => x.TerminationPointTypeUtilizeForHardwareAndSoftware1" />
                        <PropertyColumn Property="x => x.Ctr" />
                        <PropertyColumn Property="x => x.Ptr" />
                        <PropertyColumn Property="x => x.ResistorSize" />
                        <PropertyColumn Property="x => x.XdcrType" />
                        <PropertyColumn Property="x => x.Comments" />
                    </Columns>
                </MudDataGrid>
            }
            else
            {
                @Spinner()
            }
        }
        else if (SelectedSheetName == "Status")
        {
            <MudText Typo="Typo.h6">Status Sheet</MudText>

            if (StatusData.Any())
            {
                <MudDataGrid Bordered="true"
                             CanceledEditingItem="@CanceledEditingItem"
                             CommittedItemChanges="@CommittedItemChanges"
                             Dense="false"
                             EditMode="DataGridEditMode.Cell"
                             FixedHeader="true"
                             Height="500px"
                             Items="@StatusData"
                             ReadOnly="@(!IsEditEnabled)"
                             StartedEditingItem="@StartedEditingItem"
                             T="PasStandardizationTemplateStatusSheetModel"
                             Virtualize="true">
                    <Columns>
                        <PropertyColumn Editable="false" Property="x => x._0" />
                        <PropertyColumn Editable="false" Property="x => x._1" />
                        <PropertyColumn Property="x => x.Rtu" />
                        <PropertyColumn Property="x => x.Tms" />
                        <PropertyColumn Property="x => x.Description" />
                        <PropertyColumn Editable="false" Property="x => x.OsiName" />
                        <PropertyColumn Editable="false" Property="x => x.ScadaKey" />
                        <PropertyColumn Property="x => x.StatusDescription" />
                        <PropertyColumn Property="x => x.TmsInvert0110" />
                        <PropertyColumn Property="x => x.NormalState" />
                        <PropertyColumn Property="x => x.TerminationPointTypeUtilizeForHardwareAndSoftware" />
                        <PropertyColumn Property="x => x.TerminationPointTypeUtilizeForHardwareAndSoftware1" />
                        <PropertyColumn Property="x => x.Comments" />
                    </Columns>
                </MudDataGrid>
            }
            else
            {
                @Spinner()
            }
        }
        else if (SelectedSheetName == "Controls")
        {
            <MudText Typo="Typo.h6">Controls Sheet</MudText>

            if (ControlsData.Any())
            {
                <MudDataGrid T="PasStandardizationTemplateControlsSheetModel"
                             Items="@ControlsData"
                             EditMode="DataGridEditMode.Cell"
                             ReadOnly="@(!IsEditEnabled)"
                             Bordered="true"
                             Dense="false"
                             Virtualize="true"
                             FixedHeader="true"
                             Height="500px"
                             StartedEditingItem="@StartedEditingItem"
                             CanceledEditingItem="@CanceledEditingItem"
                             CommittedItemChanges="@CommittedItemChanges">
                    <Columns>
                        <PropertyColumn Property="x => x.Rtu" />
                        <PropertyColumn Property="x => x.Tms" />
                        <PropertyColumn Property="x => x.Description" />
                        <PropertyColumn Editable="false" Property="x => x.OsiName" />
                        <PropertyColumn Editable="false" Property="x => x.ScadaKey" />
                        <PropertyColumn Property="x => x.TerminationPointTypeUtilizeForHardwareAndSoftware" />
                        <PropertyColumn Property="x => x.TerminationPointTypeUtilizeForHardwareAndSoftware1" />
                        <PropertyColumn Property="x => x.Comments" />
                    </Columns>
                </MudDataGrid>

            }
            else
            {
                @Spinner()
            }
        }

        <MudExpansionPanels Class="mt-4">
            <MudExpansionPanel Text="Event Log">
                @foreach (var message in Events)
                {
                    <MudText Typo="Typo.body2">@message</MudText>
                }
                @if (Events.Count > 0)
                {
                    <MudButton Class="mt-2"
                               OnClick="@(() => Events.Clear())"
                               Variant="Variant.Filled">
                        Clear
                    </MudButton>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    }
}

@code {
    private List<PasStandardizationTemplateAnalogSheetModel> AnalogData = [];
    private List<PasStandardizationTemplateStatusSheetModel> StatusData = [];
    private List<PasStandardizationTemplateControlsSheetModel> ControlsData = [];

    private bool IsEditEnabled;
    private string SelectedFileName = string.Empty;
    private string SelectedSheetName = string.Empty;
    private List<string> FilteredSheets = [];
    private readonly List<string> Events = [];

    private readonly Dictionary<string, Type> SheetModelMap = new()
    {
        { "Analogs", typeof(PasStandardizationTemplateAnalogSheetModel) },
        { "Status", typeof(PasStandardizationTemplateStatusSheetModel) },
        { "Controls", typeof(PasStandardizationTemplateControlsSheetModel) }
    };

    private void ToggleEdit() => IsEditEnabled = !IsEditEnabled;

    private void LoadSheets(string fileName)
    {
        SelectedFileName = fileName;
        FilteredSheets = SheetModelMap.Keys.ToList();
    }

    private async Task SelectSheetAsync(string sheetName)
    {
        SelectedSheetName = sheetName;
        var json = await JsRuntime.InvokeAsync<string>("readLocalJson", $"templatesJson/{SelectedFileName}_{SelectedSheetName}.json");

        switch (sheetName)
        {
            case "Analogs":
                AnalogData = JsonSerializer.Deserialize<List<PasStandardizationTemplateAnalogSheetModel>>(json) ?? [];
                break;
            case "Status":
                StatusData = JsonSerializer.Deserialize<List<PasStandardizationTemplateStatusSheetModel>>(json) ?? [];
                break;
            case "Controls":
                ControlsData = JsonSerializer.Deserialize<List<PasStandardizationTemplateControlsSheetModel>>(json) ?? [];
                break;
        }
    }

    private void StartedEditingItem(object item) => LogEvent("StartedEditingItem", item);
    private void CanceledEditingItem(object item) => LogEvent("CanceledEditingItem", item);
    private void CommittedItemChanges(object item) => LogEvent("CommittedItemChanges", item);

    private void LogEvent(string eventName, object data)
    {
        var json = JsonSerializer.Serialize(data);
        Events.Insert(0, $"Event = {eventName}, Data = {json}");
    }

    private RenderFragment Spinner() => @<div class="align-items-center d-flex justify-content-center"
                                                  style="height: 200px;">
        <div class="spinner-grow text-primary"
             role="status"
             style="width: 4rem; height: 4rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>;
}